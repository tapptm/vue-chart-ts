{"remainingRequest":"/home/ubuntu18/Desktop/Project/chart-ts/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu18/Desktop/Project/chart-ts/src/components/LineChartContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ubuntu18/Desktop/Project/chart-ts/src/components/LineChartContainer.vue","mtime":1578381607879},{"path":"/home/ubuntu18/Desktop/Project/chart-ts/node_modules/cache-loader/dist/cjs.js","mtime":1572867949209},{"path":"/home/ubuntu18/Desktop/Project/chart-ts/node_modules/babel-loader/lib/index.js","mtime":1572867946562},{"path":"/home/ubuntu18/Desktop/Project/chart-ts/node_modules/cache-loader/dist/cjs.js","mtime":1572867949209},{"path":"/home/ubuntu18/Desktop/Project/chart-ts/node_modules/vue-loader/lib/index.js","mtime":1572867949827}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAidnVlLXByb3BlcnR5LWRlY29yYXRvciI7CmltcG9ydCBMaW5lQ2hhcnQgZnJvbSAiQC9jb21wb25lbnRzL0xpbmVDaGFydC52dWUiOwppbXBvcnQgewogIGNoYXJ0RGF0YSwKICBvcHRpb25zLAogIG5ld0RhdGUsCiAgc3RhcnREYXRlLAogIGVuZERhdGUKfSBmcm9tICIuLi9kYXRhYmFzZS9saW5lRGF0YSI7CmltcG9ydCBEYXRlcGlja2VyIGZyb20gInZ1ZS1tb21lbnQtZGF0ZXBpY2tlciI7CmltcG9ydCB7IHN0YXJ0LCBlbmQsIHRpbWVGb3JtYXQgfSBmcm9tICIuLi91dGlscy9kYXRlRm9ybWF0IjsKaW1wb3J0IG1vbWVudCBmcm9tICJtb21lbnQiOwppbXBvcnQgeyBfX2FzeW5jRGVsZWdhdG9yIH0gZnJvbSAidHNsaWIiOwoKQENvbXBvbmVudCh7CiAgY29tcG9uZW50czogeyBMaW5lQ2hhcnQsIERhdGVwaWNrZXIgfQp9KQpleHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFydENvbnRhaW5lciBleHRlbmRzIFZ1ZSB7CiAgY2hhcnREYXRhID0gY2hhcnREYXRhOwoKICBzdGFydHMgPSAnMDEvMDcvMjAyMCc7CgogIGVuZHMgPSAnMDEvJzsKICAKICB0eXBlID0gImxpbmVhciI7CgogIG9wdGlvbnMgPSB7CiAgICByZXNwb25zaXZlOiB0cnVlLAogICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsCiAgICB0aXRsZTogewogICAgICBkaXNwbGF5OiB0cnVlLAogICAgICB0ZXh0OiAibmV3IC0gIiArIHRoaXMudHlwZQogICAgfSwKICAgIHRvb2x0aXBzOiB7CiAgICAgIG1vZGU6ICJpbmRleCIsCiAgICAgIGludGVyc2VjdDogZmFsc2UsCiAgICB9LAogICAgc2NhbGVzOiB7CiAgICAgIHhBeGVzOiBbCiAgICAgICAgewogICAgICAgICAgdHlwZTogInRpbWUiLAogICAgICAgICAgdGltZTogewogICAgICAgICAgICBwYXJzZXI6IHRpbWVGb3JtYXQsCiAgICAgICAgICAgIHRvb2x0aXBGb3JtYXQ6ICJsbCBISDptbSIsCiAgICAgICAgICAgIHVuaXQ6ICJkYXkiCiAgICAgICAgICB9LAogICAgICAgICAgZGlzcGxheTogdHJ1ZSwKICAgICAgICAgIHNjYWxlTGFiZWw6IHsKICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSwKICAgICAgICAgICAgbGFiZWxTdHJpbmc6ICJEYXRlIgogICAgICAgICAgfSwKICAgICAgICAgIHRpY2tzOiB7CiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsCiAgICAgICAgICAgIG1heFJvdGF0aW9uOiA5MCwKICAgICAgICAgICAgbWF4OiBtb21lbnQodGhpcy5lbmRzKS5mb3JtYXQodGltZUZvcm1hdCksCiAgICAgICAgICAgIG1pbjogbW9tZW50KHRoaXMuc3RhcnRzKS5mb3JtYXQodGltZUZvcm1hdCkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIF0sCiAgICAgIHlBeGVzOiBbCiAgICAgICAgewogICAgICAgICAgZGlzcGxheTogdHJ1ZSwKICAgICAgICAgIHNjYWxlTGFiZWw6IHsKICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSwKICAgICAgICAgICAgbGFiZWxTdHJpbmc6ICJDb3N0cyIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICBsYXlvdXQ6IHsKICAgICAgcGFkZGluZzogewogICAgICAgIGxlZnQ6IDIwCiAgICAgIH0KICAgIH0KICB9OwoKCiAgcmVjZWlwdCA9IG51bGw7CgogIGV4cGVuc2UgPSBudWxsOwoKICBnZXRSYW5kb21JbnQoKSB7CiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDQwMDAgLSAyMDAwICsgMTUwMCkpICsgMjAwOwogIH0KCiAgcmFuZG9taXplRGF0YSgpIHsKICAgIGNoYXJ0RGF0YS5kYXRhc2V0cy5mb3JFYWNoKGRhdGFzZXRzID0+IHsKICAgICAgLy8gY29uc29sZS5sb2coeyByYW5kOiBkYXRhc2V0cy5kYXRhIH0pOwogICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHM7CiAgICAgIGRhdGFzZXQuZGF0YSA9IGRhdGFzZXRzLmRhdGEubWFwKCgpID0+IHRoaXMuZ2V0UmFuZG9tSW50KCkpOwogICAgfSk7CiAgICByZXR1cm4gdGhpcy4kcmVmcy5saW5lQ2hhcnQudXBkYXRlKCk7CiAgfQoKICB1cGRhdGUoKSB7CiAgICB0aGlzLnR5cGUgPSB0aGlzLnR5cGUgPT09ICJsaW5lYXIiID8gImxvZ2FyaXRobWljIiA6ICJsaW5lYXIiOwogICAgdGhpcy5vcHRpb25zLnRpdGxlLnRleHQgPSAiQ2hhcnQuanMgTGluZSBDaGFydCAtICIgKyB0aGlzLnR5cGU7CgogICAgY29uc29sZS5sb2coCiAgICAgICh0aGlzLm9wdGlvbnMudGl0bGUudGV4dCA9ICJDaGFydC5qcyBMaW5lIENoYXJ0IC0gIiArIHRoaXMudHlwZSkKICAgICk7CgogICAgdGhpcy5vcHRpb25zLnNjYWxlcy54QXhlc1swXS50aWNrcy5taW4gPSBtb21lbnQodGhpcy5zdGFydHMpLmZvcm1hdCgKICAgICAgdGltZUZvcm1hdAogICAgKTsKICAgIHRoaXMub3B0aW9ucy5zY2FsZXMueEF4ZXNbMF0udGlja3MubWF4ID0gbW9tZW50KHRoaXMuZW5kcykuZm9ybWF0KAogICAgICB0aW1lRm9ybWF0CiAgICApOwogICAgCiAgICBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbnMuc2NhbGVzLnhBeGVzWzBdLnRpY2tzLm1pbik7CiAgICBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbnMuc2NhbGVzLnhBeGVzWzBdLnRpY2tzLm1heCk7CgogICAgdGhpcy4kcmVmcy5saW5lQ2hhcnQudXBkYXRlKCk7CiAgfQoKICBhZGREYXRhKCkgewogICAgaWYgKGNoYXJ0RGF0YS5kYXRhc2V0cy5sZW5ndGggPj0gMCkgewogICAgICBjaGFydERhdGEubGFiZWxzLnB1c2gobmV3RGF0ZShjaGFydERhdGEubGFiZWxzLmxlbmd0aCkpOwogICAgICBjaGFydERhdGEuZGF0YXNldHNbMF0uZGF0YS5wdXNoKHRoaXMucmVjZWlwdCk7CiAgICAgIGNoYXJ0RGF0YS5kYXRhc2V0c1sxXS5kYXRhLnB1c2godGhpcy5leHBlbnNlKTsKICAgICAgdGhpcy5yZWNlaXB0ID0gIiI7CiAgICAgIHRoaXMuZXhwZW5zZSA9ICIiOwogICAgICAvLyBjb25zb2xlLmxvZyh7IGFkZDogbGluZURhdGEubGFiZWxzIH0pOwogICAgfQogICAgcmV0dXJuIHRoaXMuJHJlZnMubGluZUNoYXJ0LnVwZGF0ZSgpOwogIH0KCiAgYWRkRGF0YVJhbmRvbXMoKSB7CiAgICBpZiAoY2hhcnREYXRhLmRhdGFzZXRzLmxlbmd0aCA+PSAwKSB7CiAgICAgIGNoYXJ0RGF0YS5sYWJlbHMucHVzaChuZXdEYXRlKGNoYXJ0RGF0YS5sYWJlbHMubGVuZ3RoKSk7CiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjaGFydERhdGEuZGF0YXNldHMubGVuZ3RoOyBpbmRleCArPSAxKSB7CiAgICAgICAgY2hhcnREYXRhLmRhdGFzZXRzW2luZGV4XS5kYXRhLnB1c2godGhpcy5nZXRSYW5kb21JbnQoKSk7CiAgICAgICAgLy8gY29uc29sZS5sb2coeyBhZGRyOiBsaW5lRGF0YS5sYWJlbHMgfSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLiRyZWZzLmxpbmVDaGFydC51cGRhdGUoKTsKICB9CgogIHJlbW92ZURhdGEoKSB7CiAgICBjaGFydERhdGEubGFiZWxzLnNwbGljZSgtMSwgMSk7CiAgICBjaGFydERhdGEuZGF0YXNldHMuZm9yRWFjaChkYXRhc2V0cyA9PiB7CiAgICAgIGRhdGFzZXRzLmRhdGEucG9wKCk7CiAgICAgIC8vIGNvbnNvbGUubG9nKHsgcmVtOiBkYXRhc2V0cy5kYXRhIH0pOwogICAgfSk7CiAgICByZXR1cm4gdGhpcy4kcmVmcy5saW5lQ2hhcnQudXBkYXRlKCk7CiAgfQp9Cg=="},{"version":3,"sources":["LineChartContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LineChartContainer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"app\">\n    <form @submit.prevent=\"addData\">\n      <input v-model=\"receipt\" required placeholder=\"Incomes\" />\n      <input v-model=\"expense\" required placeholder=\"Expenses\" />\n      <button small type=\"submit\">Adddata</button>\n    </form>\n    <form @submit.prevent=\"update\">\n      <datepicker placeholder=\"Select Date\" v-model=\"starts\"></datepicker>\n      {{starts}}\n      <datepicker placeholder=\"Select Date\" v-model=\"ends\"></datepicker>\n      {{ends}}\n      <button small type=\"submit\">update</button>\n    </form>\n    <line-chart ref=\"lineChart\" :chart-data=\"chartData\" :options=\"options\" />\n    <button small @click=\"addDataRandoms()\">addData</button>\n    <button small @click=\"randomizeData()\">randomsData</button>\n    <button small @click=\"removeData()\">removeData</button>\n  </div>\n</template>\n\n<script>\nimport { Component, Vue } from \"vue-property-decorator\";\nimport LineChart from \"@/components/LineChart.vue\";\nimport {\n  chartData,\n  options,\n  newDate,\n  startDate,\n  endDate\n} from \"../database/lineData\";\nimport Datepicker from \"vue-moment-datepicker\";\nimport { start, end, timeFormat } from \"../utils/dateFormat\";\nimport moment from \"moment\";\nimport { __asyncDelegator } from \"tslib\";\n\n@Component({\n  components: { LineChart, Datepicker }\n})\nexport default class ChartContainer extends Vue {\n  chartData = chartData;\n\n  starts = '01/07/2020';\n\n  ends = '01/';\n  \n  type = \"linear\";\n\n  options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      text: \"new - \" + this.type\n    },\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            parser: timeFormat,\n            tooltipFormat: \"ll HH:mm\",\n            unit: \"day\"\n          },\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: \"Date\"\n          },\n          ticks: {\n            display: true,\n            maxRotation: 90,\n            max: moment(this.ends).format(timeFormat),\n            min: moment(this.starts).format(timeFormat)\n          }\n        }\n      ],\n      yAxes: [\n        {\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: \"Costs\"\n          }\n        }\n      ]\n    },\n    layout: {\n      padding: {\n        left: 20\n      }\n    }\n  };\n\n\n  receipt = null;\n\n  expense = null;\n\n  getRandomInt() {\n    return Math.floor(Math.random() * (4000 - 2000 + 1500)) + 200;\n  }\n\n  randomizeData() {\n    chartData.datasets.forEach(datasets => {\n      // console.log({ rand: datasets.data });\n      const dataset = datasets;\n      dataset.data = datasets.data.map(() => this.getRandomInt());\n    });\n    return this.$refs.lineChart.update();\n  }\n\n  update() {\n    this.type = this.type === \"linear\" ? \"logarithmic\" : \"linear\";\n    this.options.title.text = \"Chart.js Line Chart - \" + this.type;\n\n    console.log(\n      (this.options.title.text = \"Chart.js Line Chart - \" + this.type)\n    );\n\n    this.options.scales.xAxes[0].ticks.min = moment(this.starts).format(\n      timeFormat\n    );\n    this.options.scales.xAxes[0].ticks.max = moment(this.ends).format(\n      timeFormat\n    );\n    \n    console.log(this.options.scales.xAxes[0].ticks.min);\n    console.log(this.options.scales.xAxes[0].ticks.max);\n\n    this.$refs.lineChart.update();\n  }\n\n  addData() {\n    if (chartData.datasets.length >= 0) {\n      chartData.labels.push(newDate(chartData.labels.length));\n      chartData.datasets[0].data.push(this.receipt);\n      chartData.datasets[1].data.push(this.expense);\n      this.receipt = \"\";\n      this.expense = \"\";\n      // console.log({ add: lineData.labels });\n    }\n    return this.$refs.lineChart.update();\n  }\n\n  addDataRandoms() {\n    if (chartData.datasets.length >= 0) {\n      chartData.labels.push(newDate(chartData.labels.length));\n      for (let index = 0; index < chartData.datasets.length; index += 1) {\n        chartData.datasets[index].data.push(this.getRandomInt());\n        // console.log({ addr: lineData.labels });\n      }\n    }\n    return this.$refs.lineChart.update();\n  }\n\n  removeData() {\n    chartData.labels.splice(-1, 1);\n    chartData.datasets.forEach(datasets => {\n      datasets.data.pop();\n      // console.log({ rem: datasets.data });\n    });\n    return this.$refs.lineChart.update();\n  }\n}\n</script>\n"]}]}